/**
 * Centralized API utility for consistent request handling
 * Works in both development and production environments
 */

/**
 * Get the base URL for API requests
 * Automatically handles development vs production environments
 */
export function getApiBaseUrl(): string {
  // In browser environment, use current origin
  if (typeof window !== 'undefined') {
    return window.location.origin
  }
  
  // In server-side rendering, use environment variable or fallback
  return process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
}

/**
 * Make a GET request to an API endpoint
 * @param endpoint - API endpoint path (e.g., '/api/vehicles')
 * @param options - Additional fetch options
 * @returns Promise with parsed JSON data or null on error
 */
export async function apiGet<T = any>(endpoint: string, options: RequestInit = {}): Promise<T | null> {
  try {
    const baseUrl = getApiBaseUrl()
    const url = `${baseUrl}${endpoint}`
    
    const response = await fetch(url, {
      method: 'GET',
      cache: 'no-store',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    })
    
    if (!response.ok) {
      console.error(`API GET failed: ${response.status} ${response.statusText} for ${url}`)
      return null
    }
    
    const data = await response.json() as T
    return data
  } catch (error) {
    console.error(`API GET error for ${endpoint}:`, error)
    return null
  }
}

/**
 * Make a POST request to an API endpoint
 * @param endpoint - API endpoint path
 * @param body - Request body data
 * @param options - Additional fetch options
 * @returns Promise with parsed JSON data or null on error
 */
export async function apiPost<T = any>(
  endpoint: string, 
  body: any = {}, 
  options: RequestInit = {}
): Promise<T | null> {
  try {
    const baseUrl = getApiBaseUrl()
    const url = `${baseUrl}${endpoint}`
    
    const response = await fetch(url, {
      method: 'POST',
      cache: 'no-store',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      body: JSON.stringify(body),
      ...options,
    })
    
    if (!response.ok) {
      console.error(`API POST failed: ${response.status} ${response.statusText} for ${url}`)
      return null
    }
    
    const data = await response.json() as T
    return data
  } catch (error) {
    console.error(`API POST error for ${endpoint}:`, error)
    return null
  }
}

/**
 * API response types for consistent data handling
 */
export interface ApiResponse<T = any> {
  success: boolean
  data?: T
  error?: string
  count?: number
}

/**
 * Extract data from API response with fallback
 * @param response - API response object
 * @param fallback - Fallback value if data is not available
 * @returns Extracted data or fallback
 */
export function extractApiData<T>(response: ApiResponse<T> | null, fallback: T): T {
  if (!response || !response.success) {
    return fallback
  }
  
  return response.data || fallback
}
